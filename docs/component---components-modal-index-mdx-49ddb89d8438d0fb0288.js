(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{HIj3:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return s})),n.d(e,"default",(function(){return O}));var a=n("Fcif"),l=(n("wl/M"),n("DrYe")),o=(n("6sSf"),n("mOpA")),b=n("dV/x"),r=n("mXGw"),c=n("/FXl"),i=n("TjRS"),u=n("ZFoC");n("aD51");const d=["components"],s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!Object.prototype.hasOwnProperty.call(s,"__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"components/modal/index.mdx"}});const p={_frontmatter:s},m=i.a;function O(t){let{components:e}=t,n=Object(b.a)(t,d);return Object(c.b)(m,Object(a.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"modal-对话框"},"Modal 对话框"),Object(c.b)("p",null,"模态对话框。"),Object(c.b)("h2",{id:"何时使用"},"何时使用"),Object(c.b)("p",null,"需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 Modal 在当前页面正中打开一个浮层，承载相应的操作。"),Object(c.b)("h2",{id:"基本用法"},"基本用法"),Object(c.b)(u.c,{__position:0,__code:'() => {\n  const [visible, setVisible] = React.useState(false)\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setVisible(true)\n        }}\n      >\n        Open Modal\n      </Button>\n      <Modal\n        visible={visible}\n        title="第一个demo"\n        subTitle="SubTitle 1-2"\n        closable\n        onOk={() => {\n          setVisible(false)\n        }}\n        onCancel={() => {\n          setVisible(false)\n        }}\n      >\n        <div>content content content</div>\n      </Modal>\n    </>\n  )\n}',__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[t,e]=r.useState(!1);return Object(c.b)(r.Fragment,null,Object(c.b)(l.a,{onClick:()=>{e(!0)},mdxType:"Button"},"Open Modal"),Object(c.b)(o.a,{visible:t,title:"第一个demo",subTitle:"SubTitle 1-2",closable:!0,onOk:()=>{e(!1)},onCancel:()=>{e(!1)},mdxType:"Modal"},Object(c.b)("div",null,"content content content")))}),Object(c.b)("h3",{id:"自定义页脚"},"自定义页脚"),Object(c.b)(u.c,{__position:1,__code:'() => {\n  const [visible, setVisible] = React.useState(false)\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setVisible(true)\n        }}\n      >\n        Open Modal\n      </Button>\n      <Modal\n        visible={visible}\n        title="第二个demo"\n        footer={\n          <div>\n            <Button\n              type="normal"\n              onClick={() => {\n                setVisible(false)\n              }}\n            >\n              Return\n            </Button>\n            <Button\n              onClick={() => {\n                setVisible(false)\n              }}\n            >\n              Submit\n            </Button>\n          </div>\n        }\n      >\n        <div>content content content</div>\n      </Modal>\n    </>\n  )\n}',__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[t,e]=r.useState(!1);return Object(c.b)(r.Fragment,null,Object(c.b)(l.a,{onClick:()=>{e(!0)},mdxType:"Button"},"Open Modal"),Object(c.b)(o.a,{visible:t,title:"第二个demo",footer:Object(c.b)("div",null,Object(c.b)(l.a,{type:"normal",onClick:()=>{e(!1)},mdxType:"Button"},"Return"),Object(c.b)(l.a,{onClick:()=>{e(!1)},mdxType:"Button"},"Submit")),mdxType:"Modal"},Object(c.b)("div",null,"content content content")))}),Object(c.b)("h3",{id:"设置按钮文字和属性"},"设置按钮文字和属性"),Object(c.b)(u.c,{__position:2,__code:'() => {\n  const [visible, setVisible] = React.useState(false)\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setVisible(true)\n        }}\n      >\n        Open Modal\n      </Button>\n      <Modal\n        visible={visible}\n        title="第三个demo"\n        onOk={() => {\n          setVisible(false)\n        }}\n        onCancel={() => {\n          setVisible(false)\n        }}\n        okButtonText="确认"\n        cancelButtonText="取消"\n        okButtonProps={{ danger: true }}\n        cancelButtonProps={{ white: true }}\n      >\n        <div>content content content</div>\n      </Modal>\n    </>\n  )\n}',__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[t,e]=r.useState(!1);return Object(c.b)(r.Fragment,null,Object(c.b)(l.a,{onClick:()=>{e(!0)},mdxType:"Button"},"Open Modal"),Object(c.b)(o.a,{visible:t,title:"第三个demo",onOk:()=>{e(!1)},onCancel:()=>{e(!1)},okButtonText:"确认",cancelButtonText:"取消",okButtonProps:{danger:!0},cancelButtonProps:{white:!0},mdxType:"Modal"},Object(c.b)("div",null,"content content content")))}),Object(c.b)("h3",{id:"异步关闭"},"异步关闭"),Object(c.b)(u.c,{__position:3,__code:'() => {\n  const [visible, setVisible] = React.useState(false)\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setVisible(true)\n        }}\n      >\n        Open Modal\n      </Button>\n      <Modal\n        visible={visible}\n        title="第四个demo"\n        closable\n        onOk={async () => {\n          return Promise.resolve({\n            then: function(resolve, reject) {\n              setTimeout(() => {\n                setVisible(false)\n                resolve(true)\n              }, 10000)\n            },\n          })\n        }} //两种写法，1.async函数，return boolean，2.return Promise函数\n        onCancel={() => {\n          setVisible(false)\n        }}\n      >\n        <div>content content content</div>\n      </Modal>\n    </>\n  )\n}',__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[t,e]=r.useState(!1);return Object(c.b)(r.Fragment,null,Object(c.b)(l.a,{onClick:()=>{e(!0)},mdxType:"Button"},"Open Modal"),Object(c.b)(o.a,{visible:t,title:"第四个demo",closable:!0,onOk:async()=>Promise.resolve({then:function(t,n){setTimeout(()=>{e(!1),t(!0)},1e4)}}),onCancel:()=>{e(!1)},mdxType:"Modal"},Object(c.b)("div",null,"content content content")))}),Object(c.b)("h3",{id:"usemodal"},"useModal"),Object(c.b)(u.c,{__position:4,__code:"() => {\n  const [{ open }] = Modal.useModal()\n  return (\n    <a\n      onClick={() => {\n        open({\n          title: '第四个demo',\n          content: 'content content content',\n          onOk: () => {\n            return Promise.resolve({\n              then: function(resolve, reject) {\n                setTimeout(() => {\n                  resolve(true)\n                }, 10000)\n              },\n            })\n          }, //两种写法，1.async函数，return boolean，2.return Promise函数\n        })\n      }}\n    >\n      open\n    </a>\n  )\n}",__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[{open:t}]=o.a.useModal();return Object(c.b)("a",{onClick:()=>{t({title:"第四个demo",content:"content content content",onOk:()=>Promise.resolve({then:function(t,e){setTimeout(()=>{t(!0)},1e4)}})})}},"open")}),Object(c.b)("h3",{id:"button-child"},"Button Child"),Object(c.b)(u.c,{__position:5,__code:'() => {\n  const [visible, setVisible] = React.useState(false)\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setVisible(true)\n        }}\n      >\n        Open Modal\n      </Button>\n      <Modal\n        visible={visible}\n        title="Button demo"\n        closable\n        buttonChild={\n          <div>\n            <Button size="s">test</Button>\n          </div>\n        }\n        footer={\n          <div>\n            <Button\n              type="normal"\n              onClick={() => {\n                setVisible(false)\n              }}\n            >\n              Return\n            </Button>\n            <Button\n              onClick={() => {\n                setVisible(false)\n              }}\n            >\n              Submit\n            </Button>\n          </div>\n        }\n      >\n        <div>content content content</div>\n      </Modal>\n    </>\n  )\n}',__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[t,e]=r.useState(!1);return Object(c.b)(r.Fragment,null,Object(c.b)(l.a,{onClick:()=>{e(!0)},mdxType:"Button"},"Open Modal"),Object(c.b)(o.a,{visible:t,title:"Button demo",closable:!0,buttonChild:Object(c.b)("div",null,Object(c.b)(l.a,{size:"s",mdxType:"Button"},"test")),footer:Object(c.b)("div",null,Object(c.b)(l.a,{type:"normal",onClick:()=>{e(!1)},mdxType:"Button"},"Return"),Object(c.b)(l.a,{onClick:()=>{e(!1)},mdxType:"Button"},"Submit")),mdxType:"Modal"},Object(c.b)("div",null,"content content content")))}),Object(c.b)("h3",{id:"reset"},"Reset"),Object(c.b)(u.c,{__position:6,__code:"() => {\n  const [{ open }] = Modal.useModal()\n  return (\n    <a\n      onClick={() => {\n        open({\n          title: '第四个demo',\n          content: ({ setOnReset, setResetDisabled }) => {\n            setResetDisabled(false)\n            setOnReset(() => {\n              setResetDisabled(true)\n              console.log('onReset')\n            })\n            return 'content content content'\n          },\n          onOk: () => {\n            return Promise.resolve({\n              then: function(resolve, reject) {\n                setTimeout(() => {\n                  resolve(true)\n                }, 10000)\n              },\n            })\n          }, //两种写法，1.async函数，return boolean，2.return Promise函数\n        })\n      }}\n    >\n      open\n    </a>\n  )\n}",__scope:{props:n,DefaultLayout:i.a,Playground:u.c,Props:u.d,Modal:o.a,Button:l.a,DefaultLayout:i.a,_frontmatter:s},mdxType:"Playground"},()=>{const[{open:t}]=o.a.useModal();return Object(c.b)("a",{onClick:()=>{t({title:"第四个demo",content:t=>{let{setOnReset:e,setResetDisabled:n}=t;return n(!1),e(()=>{n(!0),console.log("onReset")}),"content content content"},onOk:()=>Promise.resolve({then:function(t,e){setTimeout(()=>{t(!0)},1e4)}})})}},"open")}),Object(c.b)("h2",{id:"api"},"API"),Object(c.b)("h3",{id:"modalusemodal0open-共用"},"Modal、useModal","[0]",".open 共用"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"属性"),Object(c.b)("th",{parentName:"tr",align:null},"说明"),Object(c.b)("th",{parentName:"tr",align:null},"类型"),Object(c.b)("th",{parentName:"tr",align:null},"默认值"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"title"),Object(c.b)("td",{parentName:"tr",align:null},"标题"),Object(c.b)("td",{parentName:"tr",align:null},"ReactNode"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"subTitle"),Object(c.b)("td",{parentName:"tr",align:null},"子标题"),Object(c.b)("td",{parentName:"tr",align:null},"ReactNode"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"closable"),Object(c.b)("td",{parentName:"tr",align:null},"是否显示右上角的关闭按钮"),Object(c.b)("td",{parentName:"tr",align:null},"boolean"),Object(c.b)("td",{parentName:"tr",align:null},"false")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"okButtonText"),Object(c.b)("td",{parentName:"tr",align:null},"确认按钮文字,不要此按钮时设置为 null"),Object(c.b)("td",{parentName:"tr",align:null},"string","|","null"),Object(c.b)("td",{parentName:"tr",align:null},'"Confirm"')),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"cancelButtonText"),Object(c.b)("td",{parentName:"tr",align:null},"取消按钮文字,不要此按钮时设置为 null"),Object(c.b)("td",{parentName:"tr",align:null},"string","|","null"),Object(c.b)("td",{parentName:"tr",align:null},'"Cancel"')),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"okButtonProps"),Object(c.b)("td",{parentName:"tr",align:null},"确认按钮 props"),Object(c.b)("td",{parentName:"tr",align:null},"ButtonProps"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"cancelButtonProps"),Object(c.b)("td",{parentName:"tr",align:null},"取消按钮 props"),Object(c.b)("td",{parentName:"tr",align:null},"ButtonProps"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"onOk"),Object(c.b)("td",{parentName:"tr",align:null},"点击确定回调，函数为 promise 或者返回 promise 时，会自动展示 Loading；非受控或者使用 useModal","[0]",".open 时，返回 true 或者返回 promise 执行 resolve 后自动关闭"),Object(c.b)("td",{parentName:"tr",align:null},"(data) => boolean ","|"," Promise<boolean",">"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"onCancel"),Object(c.b)("td",{parentName:"tr",align:null},"取消回调"),Object(c.b)("td",{parentName:"tr",align:null},"()=>void"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"footer"),Object(c.b)("td",{parentName:"tr",align:null},"底部内容"),Object(c.b)("td",{parentName:"tr",align:null},"ReactNode"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"centered"),Object(c.b)("td",{parentName:"tr",align:null},"垂直居中展示 Modal"),Object(c.b)("td",{parentName:"tr",align:null},"boolean"),Object(c.b)("td",{parentName:"tr",align:null},"false")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"width"),Object(c.b)("td",{parentName:"tr",align:null},"弹窗宽度"),Object(c.b)("td",{parentName:"tr",align:null},"number"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"zIndex"),Object(c.b)("td",{parentName:"tr",align:null},"设置 Modal 的 z-index"),Object(c.b)("td",{parentName:"tr",align:null},"number"),Object(c.b)("td",{parentName:"tr",align:null},"1000")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"className"),Object(c.b)("td",{parentName:"tr",align:null},"自定义 CSS className"),Object(c.b)("td",{parentName:"tr",align:null},"string"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"style"),Object(c.b)("td",{parentName:"tr",align:null},"自定义内联样式"),Object(c.b)("td",{parentName:"tr",align:null},"CSSProperties"),Object(c.b)("td",{parentName:"tr",align:null},"-")))),Object(c.b)("h3",{id:"modal"},"Modal"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"属性"),Object(c.b)("th",{parentName:"tr",align:null},"说明"),Object(c.b)("th",{parentName:"tr",align:null},"类型"),Object(c.b)("th",{parentName:"tr",align:null},"默认值"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"defaultVisible"),Object(c.b)("td",{parentName:"tr",align:null},"初始对话框是否可见"),Object(c.b)("td",{parentName:"tr",align:null},"boolean"),Object(c.b)("td",{parentName:"tr",align:null},"false")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"visible"),Object(c.b)("td",{parentName:"tr",align:null},"对话框是否可见"),Object(c.b)("td",{parentName:"tr",align:null},"boolean"),Object(c.b)("td",{parentName:"tr",align:null},"false")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"onVisibleChange"),Object(c.b)("td",{parentName:"tr",align:null},"对话框显隐回调"),Object(c.b)("td",{parentName:"tr",align:null},"(visible:boolean)=>void"),Object(c.b)("td",{parentName:"tr",align:null},"-")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"destroyOnClose"),Object(c.b)("td",{parentName:"tr",align:null},"对话框关闭时销毁 dom"),Object(c.b)("td",{parentName:"tr",align:null},"boolean"),Object(c.b)("td",{parentName:"tr",align:null},"false")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"buttonChild"),Object(c.b)("td",{parentName:"tr",align:null},"对话框右上角按钮区域"),Object(c.b)("td",{parentName:"tr",align:null},"React.ReactElement[]"),Object(c.b)("td",{parentName:"tr",align:null},"-")))),Object(c.b)("h3",{id:"usemodal0open"},"useModal","[0]",".open"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"属性"),Object(c.b)("th",{parentName:"tr",align:null},"说明"),Object(c.b)("th",{parentName:"tr",align:null},"类型"),Object(c.b)("th",{parentName:"tr",align:null},"默认值"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"content"),Object(c.b)("td",{parentName:"tr",align:null},"内容"),Object(c.b)("td",{parentName:"tr",align:null},"React.ReactNode"),Object(c.b)("td",{parentName:"tr",align:null},"-")))),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"    const [{ open,close },contextHolder] = Modal.useModal();\n    return (\n      <a\n        onClick={() => {\n          open({\n            title: 'demo',\n            content: 'content content content',\n            onOk: async() => {\n             const {success} =  await run()\n             return success\n            },\n          });\n        }}\n      >\n        open\n      </a>\n    );\n")))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!Object.prototype.hasOwnProperty.call(O,"__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"components/modal/index.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---components-modal-index-mdx-49ddb89d8438d0fb0288.js.map