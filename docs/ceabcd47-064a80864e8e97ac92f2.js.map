{"version":3,"sources":["webpack:///../node_modules/@remix-run/router/dist/router.js"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","path","parsePath","search","hash","Push","nextLocation","splice","delta","Replace","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","startsWith","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","random","toString","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","push","historyState","pushState","error","DOMException","name","replace","go","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","every","compareIndexes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","ErrorResponseImpl","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","viewTransitionOpts","completedFetchers","deletedFetchersKeys","fetcher","has","subscriber","unstable_viewTransitionOpts","delete","deleteFetcher","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","priorPaths","get","currentLocation","toPaths","add","getSavedScrollPosition","async","startNavigation","opts","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","submission","AbortController","pendingActionData","pendingError","request","createClientSideRequest","signal","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","aborted","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","controller","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","fetcherKey","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","getFetcher","_temp","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","Promise","all","resolveDeferredResults","setFetcherError","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","v","isArray","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","encodeLocation","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","r","handleFetcherAction","resolveDeferredData","handleFetcherLoader","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","isValidMethod","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","acc","_ref3","String","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","reject","abortPromise","race","context","requestContext","handlerError","catch","isResponse","headers","isStaticRequest","protocol","isSameBasename","isRouteRequest","response","contentType","statusCode","deferred","resolveData","isDeferredData","_result$init","_result$init2","Headers","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","signals","isRevalidatingLoader","then","unwrap","unwrappedData","getAll","pathMatches"],"mappings":"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","file":"ceabcd47-064a80864e8e97ac92f2.js","sourcesContent":["/**\n * @remix-run/router v1.11.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, viewTransitionOpts) {\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    subscribers.forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), viewTransitionOpts);\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };"],"sourceRoot":""}